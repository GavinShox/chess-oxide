import { Button, VerticalBox, GridBox, ScrollView, ListView, LineEdit, ComboBox, SpinBox, StandardButton, CheckBox } from "std-widgets.slint";
import { BoardTheme, PieceTheme, BoardThemes, PieceThemes } from "./theme.slint";
import { SettingsDialog_UI } from "settings.slint";
import { MoveHistory } from "move_history.slint";
import { Piece_UI, Move_UI, MoveNotation_UI, PieceType_UI, PieceColour_UI, Square, PieceImg } from "defs.slint";
import { Import_UI } from "import.slint";
import { Export_UI } from "export.slint";

import "resources/font/CaskaydiaCoveNerdFont-Regular.ttf";

// re-export for use in rust, this file is what is compiled in build.rs
export { SettingsDialog_UI, Import_UI, Export_UI }

export component Board_UI inherits Window {
    title: "Chess Oxide";
    icon: @image-url("resources/chesslogo.png");
    default-font-family: "CaskaydiaCove Nerd Font";
    //background: rgb(218, 235, 235);

    property <int> board-size: 8;
    property <length> square-size: 60px;

    in-out property <[Piece_UI]> position;
    in-out property <bool> detached-state: false;
    in-out property <[bool]> selected-legal-moves;
    in-out property <bool> show-legal-moves: false;
    out property <int> selected-from-square: -1;
    out property <int> selected-to-square: -1;
    in-out property <bool> engine-made-move: true;
    in-out property <Move-UI> last-move: { from-square: -1, to-square: -1, string: "" };
    in-out property <PieceColour-UI> player-colour: PieceColour-UI.White;
    in-out property <[MoveNotation-UI]> move-history;
    in-out property <string> selected-move-notation;
    in-out property <int> selected-move-number;
    in-out property <int> selected-halfmove;
    in-out property <string> depth: "5"; // default depth 5
    in-out property <string> gamestate;
    in-out property <bool> show-eval;
    in-out property <string> eval;
    in property <BoardTheme> board-theme: BoardThemes.wood;
    in property <PieceTheme> piece-theme: PieceThemes.default;
    callback new-game();
    callback new-chess960-game();
    callback make-move() -> bool;
    callback engine-make-move();
    callback refresh-position();
    callback get-gamestate();
    callback settings-dialog();
    callback import-dialog();
    callback export-dialog();
    callback find-state(string);
    callback prev-state();
    callback next-state();
    callback latest-state();
    callback select-legal-moves(int);

    public function reset-properties(player-colour: PieceColour-UI, side-to-move-colour: PieceColour-UI) {
        self.selected-from-square = -1;
        self.selected-to-square = -1;
        self.engine-made-move = true;
        self.last-move = { from-square: -1, to-square: -1 };
        self.selected-legal-moves = [];
        self.selected-move-notation = "";
        self.detached-state = false;
        self.selected-move-number = 0;
        self.selected-halfmove = 0;
        root.player-colour = player-colour;
        root.eval = "";

        refresh-position();

        if player-colour == side-to-move-colour {
            root.engine-made-move = true;
        } else {
            root.engine-made-move = false;
            root.engine-make-move();
        }
    }

    HorizontalLayout {
        padding: 10px;
        VerticalLayout {
            alignment: center;
            spacing: 10px;
            HorizontalLayout {
                spacing: 5px;
                alignment: center;
                Button {
                    text: "\u{eb52}";
                    width: 5%;
                    height: 25px;
                    padding: 10px;
                    clicked => {
                        settings-dialog();
                    }
                }

                Button {
                    text: "New Game";
                    width: 25%;
                    height: 25px;
                    padding: 10px;
                    clicked => {
                        if new-game-side.current-value == "White" {
                            root.new-game();
                            root.reset-properties(PieceColour-UI.White, PieceColour-UI.White);
                        } else {
                            root.new-game();
                            root.reset-properties(PieceColour-UI.Black, PieceColour-UI.White);
                        }
                    }
                }

                Button {
                    text: "New Chess960 Game";
                    width: 25%;
                    height: 25px;
                    padding: 10px;
                    clicked => {
                        if new-game-side.current-value == "White" {
                            root.new-chess960-game();
                            root.reset-properties(PieceColour-UI.White, PieceColour-UI.White);
                        } else {
                            root.new-chess960-game();
                            root.reset-properties(PieceColour-UI.Black, PieceColour-UI.White);
                        }
                    }
                }

                new-game-side := ComboBox {
                    width: 25%;
                    height: 25px;
                    model: ["White", "Black"];
                    current-value: "White";
                }
            }

            VerticalLayout {
                //background: rgb(218, 235, 235);
                game-info := Text {
                    text: gamestate;
                    horizontal-alignment: center;
                    font-size: 20px;
                }

                if root.show-eval: Text {
                    text: "Engine eval (relative): " + eval;
                    horizontal-alignment: center;
                    font-size: 12px;
                }
            }

            VerticalLayout {
                spacing: 10px;
                //width: board.width;
                
                    // VerticalLayout {
                    //     for rank in ["8", "7", "6", "5", "4", "3", "2", "1"]: Text {
                    //         text: rank;
                    //         font-size: 12px;
                    //         font-weight: 500;
                    //         height: square-size;
                    //         vertical-alignment: center;
                    //         horizontal-alignment: center;
                    //     }
                    // }

                board := Rectangle {
                    border-color: black;
                    border-width: 1px;
                    border-radius: 10px;
                    width: (square-size * board-size) + square-size;
                    height: (square-size * board-size) + square-size;
                    clip: true;
                    background: root.board-theme.dark-square.darker(0.5);
                    VerticalLayout {
                        alignment: center;
                        for row in board-size: HorizontalLayout {
                            alignment: center;
                            Text {
                                text: root.player-colour == PieceColour-UI.White ? (board-size - row) + " " : (row + 1) + " ";
                                font-size: 14px;
                                font-weight: 500;
                                vertical-alignment: center;
                            }

                            for sq in board-size: square := Square {
                                index: sq + (row * board-size);
                                width: square-size;
                                height: square-size;
                                theme: root.board-theme;
                                piece-img := PieceImg {
                                    piece: root.position[parent.index];
                                    width: parent.width;
                                    height: parent.height;
                                    piece-theme: root.piece-theme;
                                }
                                legal-move: root.selected-legal-moves[self.index] && root.show-legal-moves;

                                ta := TouchArea {
                                    height: 100%;
                                    width: 100%;
                                    clicked => {
                                        if root.selected-from-square == -1 {
                                            root.select-legal-moves(square.index);
                                            root.selected-from-square = square.index;
                                        } else if root.selected-from-square >= 0 && root.selected-to-square == -1 && root.engine-made-move {
                                            root.selected-to-square = square.index;
                                            if root.make-move() == true {
                                                // side effect makes move but only returns true if move is valid
                                                root.refresh-position();
                                                root.engine-made-move = false;
                                                root.engine-make-move();
                                            }// reset variables even if move was invalid
                                            root.selected-from-square = -1;
                                            root.selected-to-square = -1;
                                            root.selected-legal-moves = [];
                                            // reselect square if there was a players piece there
                                            if root.position[square.index].piece-colour == root.player-colour {
                                                root.select-legal-moves(square.index);
                                                root.selected-from-square = square.index;
                                            }
                                        }// shouldnt reach this else
                                        else {
                                            root.selected-from-square = -1;
                                            root.selected-to-square = -1;
                                        }
                                    }
                                    // moved => {
                                    //     if (self.pressed) {
                                    //         piece-img.x = self.mouse-x - self.pressed-x;
                                    //         piece-img.y = self.mouse-y - self.pressed-y;
                                    //     }
                                    // }
                                }

                                states [
                                    last-move when root.last-move.from-square == square.index || root.last-move.to-square == square.index: {
                                        square.border-color: salmon;
                                        square.border-width: 2px;
                                    }
                                    clicked-from when root.selected-from-square == square.index && root.engine-made-move: {
                                        square.background: square.get-square-background().darker(0.2);
                                    }
                                    hovered when ta.has-hover && root.engine-made-move: {
                                        square.background: square.get-square-background().darker(0.1);
                                    }
                                    disabled when !root.engine-made-move: {
                                        ta.enabled: false;
                                    }
                                    disabled-detatched when root.detached-state: {
                                        ta.enabled: false;
                                        square.background: square.get-square-background().transparentize(0.15);
                                    }
                                ]
                            }
                        }

                        HorizontalLayout {
                            alignment: center;
                            // left padding to align with board, not ideal but looks good enough to not annoy me
                            property <[string]> files: root.player-colour == PieceColour-UI.White ? ["  a", "  b", "  c", "  d", "  e", "  f", "  g", "  h"] : ["  h", "  g", "  f", "  e", "  d", "  c", "  b", "  a"];
                            for file in files: Text {
                                text: file;
                                font-size: 14px;
                                font-weight: 500;
                                width: square-size;
                                horizontal-alignment: center;
                            }
                        }
                    }
                }

                HorizontalLayout {
                    width: board.width;
                    alignment: center;
                    spacing: 5px;

                    Button {
                        width: 30%;
                        text: "Import";
                        clicked => {
                            import-dialog();
                        }
                    }

                    Button {
                        width: 30%;
                        text: "Export";
                        clicked => {
                            export-dialog();
                        }
                    }
                }
            }
        }

        VerticalLayout {
            MoveHistory {
                move-history: root.move-history;
                highlight-selected: true;
                selected-move-notation <=> root.selected-move-notation;
                selected-move-number <=> root.selected-move-number;
                selected-halfmove <=> root.selected-halfmove;
                selected(n) => {
                    root.find-state(n);
                }
            }

            HorizontalLayout {
                spacing: 5px;
                Button {
                    text: "";
                    clicked => {
                        root.prev-state();
                    }
                }

                Button {
                    text: "󰑐";
                    clicked => {
                        root.latest-state();
                    }
                }

                Button {
                    text: "";
                    clicked => {
                        root.next-state();
                    }
                }
            }
        }
    }
}

import { Button, VerticalBox, GridBox, ScrollView, ListView, LineEdit, ComboBox, SpinBox, StandardButton, CheckBox } from "std-widgets.slint";
import "resources/font/CaskaydiaCoveNerdFont-Regular.ttf";

export struct BoardTheme {
    dark-square: color,
    light-square: color,
}

export enum PieceType_UI {
    None, // default value
    King,
    Queen,
    Rook,
    Bishop,
    Knight,
    Pawn
}

export enum PieceColour_UI {
    None, // default value
    White,
    Black
}

export struct Piece_UI {
    piece-colour: PieceColour_UI,
    piece-type: PieceType_UI,
}

export struct Move_UI {
    from-square: int,
    to-square: int,
    string: string,
}

export struct MoveNotation_UI {
    move-number: int,
    notation1: string,
    notation2: string,
}

global BoardThemes {
    out property <BoardTheme> wood: {
        dark-square: Colors.burlywood,
        light-square: Colors.white,
    };
    out property <BoardTheme> sky-blue: {
        dark-square: Colors.skyblue,
        light-square: Colors.white,
    };
    out property <BoardTheme> sea-green: {
        dark-square: Colors.lightseagreen,
        light-square: Colors.white,
    };
    out property <BoardTheme> purple: {
        dark-square: Colors.blueviolet,
        light-square: Colors.white,
    };
    out property <BoardTheme> red: {
        dark-square: Colors.lightcoral,
        light-square: Colors.white,
    };
}

component PieceImg inherits Image {
    pure function get-piece-img(piece: Piece_UI) -> image {
        if piece.piece-type == PieceType_UI.King {
            return piece.piece-colour == PieceColour_UI.White ? @image-url("resources/klt45.svg") : @image-url("resources/kdt45.svg");
        }
        if piece.piece-type == PieceType_UI.Queen {
            return piece.piece-colour == PieceColour_UI.White ? @image-url("resources/qlt45.svg") : @image-url("resources/qdt45.svg");

        }
        if piece.piece-type == PieceType_UI.Rook {
            return piece.piece-colour == PieceColour_UI.White ? @image-url("resources/rlt45.svg") : @image-url("resources/rdt45.svg");

        }
        if piece.piece-type == PieceType_UI.Bishop {
            return piece.piece-colour == PieceColour_UI.White ? @image-url("resources/blt45.svg") : @image-url("resources/bdt45.svg");

        }
        if piece.piece-type == PieceType_UI.Knight {
            return piece.piece-colour == PieceColour_UI.White ? @image-url("resources/nlt45.svg") : @image-url("resources/ndt45.svg");

        }
        if piece.piece-type == PieceType_UI.Pawn {
            return piece.piece-colour == PieceColour_UI.White ? @image-url("resources/plt45.svg") : @image-url("resources/pdt45.svg");

        }
        
        return @image-url("");
    }

    in property <Piece_UI> piece;
    source: get-piece-img(piece);
}

component Square inherits Rectangle {
    in property <int> index;
    in property <BoardTheme> theme;
    property <color> dark-square: theme.dark-square;
    property <color> light-square: theme.light-square;

    public pure function get-square-background() -> color {
        if (Math.mod(Math.floor(index / 8), 2) == 0) {
            return Math.mod(index, 2) == 0 ? light-square : dark-square;
        }
        else {
            return Math.mod(index, 2) == 0 ? dark-square : light-square;
        }
    }

    background: get-square-background();

    animate background { duration: 50ms; }
}

export component SettingsDialog_UI inherits Dialog {
    title: "Settings";
    icon: @image-url("resources/chesslogo.png");
    default-font-family: "CaskaydiaCove Nerd Font";
    width: 300px;
    height: 400px;
    always-on-top: true;

    callback close();
    callback set-theme(BoardTheme);
    callback set-depth(string);

    VerticalLayout {
        alignment: start;
        spacing: 10px;
        HorizontalLayout {
            alignment: center;
            spacing: 10px;
            Text {
                text: "Engine Depth: ";
                font-size: 12px;
                vertical-alignment: center;
            }
            ComboBox {
                height: 25px;
                model: [2, 3, 4, 5, 6, 7];
                current-value: 5;
                selected => { set-depth(self.current-value); }
            }
        }
        HorizontalLayout {
            alignment: center;
            spacing: 10px;
            Text {
                text: "Board Theme: ";
                font-size: 12px;
                vertical-alignment: center;
            }
            ComboBox {
                model: ["Wood", "Sky Blue", "Sea Green", "Purple", "Red"];
                current-value: "Wood";
                height: 25px;
                selected => {
                    if (self.current-value == "Wood") {
                        set-theme(BoardThemes.wood);
                    }
                    else if (self.current-value == "Sky Blue") {
                        set-theme(BoardThemes.sky-blue);
                    }
                    else if (self.current-value == "Sea Green") {
                        set-theme(BoardThemes.sea-green);
                    }
                    else if (self.current-value == "Purple") {
                        set-theme(BoardThemes.purple);
                    }
                    else if (self.current-value == "Red") {
                        set-theme(BoardThemes.red);
                    }
                }
            }
        } 
        StandardButton {
            kind: ok;
            clicked => { close(); }
        }   
    }
}

export component ImportFen_UI inherits Dialog {
    title: "Import FEN";
    icon: @image-url("resources/chesslogo.png");
    default-font-family: "CaskaydiaCove Nerd Font";
    width: 400px;
    height: 200px;
    always-on-top: true;

    in property <bool> error: false;
    in property <string> error-message: "";
    in property <string> fen_str <=> fen.text;
    in property <bool> as-white <=> side.checked;//side.current-value == "White" ? true : false;

    callback import-fen(string);
    callback close();

    VerticalLayout {
        alignment: center;
        spacing: 10px;
        fen:= LineEdit {
            text: "";
            placeholder-text: "Enter FEN";
            read-only: false;
        }
        Text {
            text: "Error: " + error-message;
            color: red;
            visible: error;
            font-size: 10px;
            wrap: word-wrap;
            vertical-alignment: center;
        }
        HorizontalLayout {
            alignment: center;
            spacing: 10px;
            StandardButton { 
                kind: ok; 
                clicked => { import-fen(fen.text); }
            }
            StandardButton { 
                kind: cancel; 
                clicked => { close(); }
            }
        }
        HorizontalLayout {
            alignment: center;
            Text {
                text: "Play as white ";
                vertical-alignment: center;
            }
            side := CheckBox {
                //text: "Play as white:";
                checked: true;
            }
        }
    }
}

export component Board_UI inherits Window {
    title: "Chess";
    icon: @image-url("resources/chesslogo.png");
    default-font-family: "CaskaydiaCove Nerd Font";
    //background: rgb(218, 235, 235);

    property <int> board-size: 8;
    property <length> square-size: 50px;

    in-out property <[Piece_UI]> position;
    out property <int> selected-from-square: -1;
    out property <int> selected-to-square: -1;
    in-out property <bool> engine-made-move: true;
    in-out property <Move-UI> last-move: { from-square: -1, to-square: -1, string: "" };
    in-out property <PieceColour-UI> player-colour: PieceColour-UI.White;
    in-out property <[MoveNotation-UI]> move-history;
    in property <string> fen;
    in-out property <string> depth: "5"; // default depth
    in-out property <string> gamestate;
    in property <BoardTheme> board-theme: BoardThemes.wood;

    callback new-game();
    callback make-move() -> bool;
    callback engine-make-move();
    callback refresh-position();
    callback get-gamestate();
    callback import-fen-dialog();
    callback settings-dialog();

    public function reset-properties(player-colour: PieceColour-UI, side-to-move-colour: PieceColour-UI) {
        self.selected-from-square = -1;
        self.selected-to-square = -1;
        self.engine-made-move = true;
        self.last-move = { from-square: -1, to-square: -1, string: "" };
        root.player-colour = player-colour;

        refresh-position();

        if player-colour == side-to-move-colour {
            root.engine-made-move = true;
        } 
        else {
            root.engine-made-move = false;
            root.engine-make-move();
        }
    }

    HorizontalLayout {
        padding: 10px;
        VerticalLayout {
            alignment: center;
            spacing: 10px;
            HorizontalLayout {
                spacing: 1px;
                alignment: center;
                Button {
                    text: "\u{eb52}";
                    width: 5%;
                    height: 25px;
                    padding: 10px;
                    clicked => { settings-dialog(); }
                }
                Button {
                    text: "New Game (white)";
                    width: 25%;
                    height: 25px;
                    padding: 10px;
                    clicked => { 
                        root.new-game();
                        root.reset-properties(PieceColour-UI.White, PieceColour-UI.White);
                     }
                }
                Button {
                    text: "New Game (black)";
                    width: 25%;
                    height: 25px;
                    padding: 10px;
                    clicked => { 
                        root.new-game();
                        root.reset-properties(PieceColour-UI.Black, PieceColour-UI.White); 
                    }
                }
            }
            Rectangle {
                //background: rgb(218, 235, 235);
                game-info := Text {
                    text: gamestate;
                    horizontal-alignment: center;
                    font-size: 20px;
                }
            }
            VerticalLayout {
                spacing: 10px;
                width: board.width;

                board := Rectangle {
                    border-color: black;
                    border-width: 1px;
                    border-radius: 5px;
                    width: square-size * board-size;
                    height: square-size * board-size;
                    clip: true;
                    VerticalLayout {
                        alignment: center;
                        for row in board-size: HorizontalLayout {
                            alignment: center;
                            spacing: 0px;
                            for sq in board-size: square := Square {
                                index: sq + (row * board-size);
                                width: square-size;
                                height: square-size;
                                theme: root.board-theme;
                                
                                piece-img := PieceImg {
                                    piece: root.position[parent.index];
                                    width: parent.width;
                                    height: parent.height;
                                }
                
                                ta := TouchArea {
                                    height: 100%;
                                    width: 100%;
                                    clicked => {
                                        if root.selected-from-square == -1 {
                                            root.selected-from-square = square.index;
                                        }
                                        else if root.selected-from-square >= 0 && root.selected-to-square == -1 && root.engine-made-move {
                                            root.selected-to-square = square.index;
                                            if root.make-move() == true { // side effect makes move but only returns true if move is valid
                                                root.refresh-position();
                
                                                // root.engine-made-move = false;
                                                // root.engine-make-move();
                                            }
                                            
                                            // reset variables even if move was invalid
                                            root.selected-from-square = -1;
                                            root.selected-to-square = -1;
            
                                            // reselect square if there was a players piece there
                                            if root.position[square.index].piece-colour == root.player-colour {
                                                root.selected-from-square = square.index;
                                            }
                                        }
                                        // shouldnt reach this else
                                        else {
                                            root.selected-from-square = -1;
                                            root.selected-to-square = -1;
                                        
                                        }
                                    }
                                    // moved => {
                                    //     if (self.pressed) {
                                    //         piece-img.x = self.mouse-x - self.pressed-x;
                                    //         piece-img.y = self.mouse-y - self.pressed-y;
                                    //     }
                                    // }
                                }
                
                                states [
                                    last-move when root.last-move.from-square == square.index || root.last-move.to-square == square.index: {
                                        square.border-color: salmon;
                                        square.border-width: 2px;
                
                                    }
                                    clicked-from when root.selected-from-square == square.index && root.engine-made-move: {
                                        square.background: square.get-square-background().darker(0.2);
                                    }
                                    hovered when ta.has-hover && root.engine-made-move: {
                                        square.background: square.get-square-background().darker(0.1);
                                    }
                                    disabled when !root.engine-made-move: {
                                        ta.enabled: false;
                                    }
                                ]
                
                            }
                
                        }
            
                    }
        
                }
    
                fen_export := LineEdit {
                    visible: true;
                    font-size: 10px;
                    text: root.fen;
                    read-only: true;
                    horizontal-alignment: center;
                }
    
            }
        }
        VerticalLayout {
            padding: 10px;
            spacing: 10px;
            Text {
                horizontal-alignment: center;
                text: "Move History:";
                font-size: 18px;
                font-weight: 500;
            }
            Rectangle {
                border-color: black;
                border-radius: 5px;
                border-width: 1px;
                max-width: 100px;
                
                ListView {
                    for move in move-history: Text {
                        text: " " + move.move-number + ". " + move.notation1 + " " + move.notation2;//Math.mod(i+1, 2) == 0 ? move-history[i - 1] + " " + move : ((i / 2) + 1) + ".";
                        font-size: 14px;
                    }
                }    
            }
            Button {
                text: "Import FEN";
                clicked => {
                    import-fen-dialog();
                }
            }
        }
    }
}

import { Button, VerticalBox, GridBox } from "std-widgets.slint";

export enum PieceType_UI {
    King,
    Queen,
    Rook,
    Bishop,
    Knight,
    Pawn,
    None
}

export enum PieceColour_UI {
    White,
    Black,
    None
}

export struct Piece_UI {
    piece-colour: PieceColour_UI,
    piece-type: PieceType_UI,
}

component PieceImg inherits Image {
    pure function get-piece-img(piece: Piece_UI) -> image {
        if piece.piece-type == PieceType_UI.King {
            return piece.piece-colour == PieceColour_UI.White ? @image-url("resources/klt45.svg") : @image-url("resources/kdt45.svg");
        }
        if piece.piece-type == PieceType_UI.Queen {
            return piece.piece-colour == PieceColour_UI.White ? @image-url("resources/qlt45.svg") : @image-url("resources/qdt45.svg");

        }
        if piece.piece-type == PieceType_UI.Rook {
            return piece.piece-colour == PieceColour_UI.White ? @image-url("resources/rlt45.svg") : @image-url("resources/rdt45.svg");

        }
        if piece.piece-type == PieceType_UI.Bishop {
            return piece.piece-colour == PieceColour_UI.White ? @image-url("resources/blt45.svg") : @image-url("resources/bdt45.svg");

        }
        if piece.piece-type == PieceType_UI.Knight {
            return piece.piece-colour == PieceColour_UI.White ? @image-url("resources/nlt45.svg") : @image-url("resources/ndt45.svg");

        }
        if piece.piece-type == PieceType_UI.Pawn {
            return piece.piece-colour == PieceColour_UI.White ? @image-url("resources/plt45.svg") : @image-url("resources/pdt45.svg");

        }
        
        return @image-url("");
    }

    in property <Piece_UI> piece;
    source: get-piece-img(piece);
}

component Square inherits Rectangle {
    in property<int> index;    
}

export component Board inherits Window {
    out property<int> board-size: 8;
    in-out property <[Piece_UI]> position;

    VerticalLayout {
        
        for row in board-size: HorizontalLayout {

            for sq in board-size: square := Square {
                index: sq + (row * board-size);
                width: 50px;
                height: 50px;
                background: Math.mod(sq + row, 2) == 0 ? white : lightblue;
                
                PieceImg {
                    piece: root.position[parent.index];
                    width: parent.width;
                    height: parent.height;

                    popup := PopupWindow {
                        Rectangle { height:100%; width: 100%; background: red; }
                        Text { text: square.index;}
                        x: parent.x; y: parent.y; height: 50px; width: 50px;
                    }
                    
                    TouchArea {
                        height: 100%;
                        width: 100%;
                        clicked => {
                            popup.show();
                        }
                    }

                }
            }

        }

    }
}
